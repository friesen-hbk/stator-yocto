#!/bin/bash
#
# bootstrap-yocto
#
# Creates a new Yocto BSP tree from scratch by fetching tools and source code,
# and setting everything up on disk.
#

# default values, unless caller specifies otherwise
DEFBASENAME=
MANIFESTBRANCH=master

# internal vars
SCRIPTNAME=bootstrap-yocto
CWD=`pwd`
BASEFOLDER=$CWD/$DEFBASENAME

clean_up()
{
    unset DEFBASENAME MANIFESTBRANCH SCRIPTNAME CWD BASEFOLDER
}

usage()
{
    echo -e "
Usage:

    ./$SCRIPTNAME [base-folder] [manifest-branch]

        Creates a new Yocto BSP tree from scratch by fetching tools and source code,
        and setting everything up on disk.

        Examples:

        Create a new Yocto tree in the default '$DEFBASENAME' folder, using the
        default manifest branch (configured in Gitlab)

            ./$SCRIPTNAME

        Create a new Yocto tree in the 'work' folder, using the default manifest
        branch (set in Gitlab)

            ./$SCRIPTNAME work

        Create a new Yocto tree in the 'work' folder, using the 'release-1.0'
        manifest branch

            ./$SCRIPTNAME work release-1.0
"
}

prepare_git_hooks()
{
mkdir -p .git/hooks
cat > .git/hooks/post-commit << EOF
#!/bin/sh
# Please save this script in .git/hooks/post-commit
# -----------------------------------------------------
# Post-{commit,checkout,merge} hook for the gitinfo2 package
#

# Get the first tag found in the history from the current HEAD
FIRSTTAG=\$(git describe --tags --always --dirty='-*' 2>/dev/null)
# Get the first tag in history that looks like a Release
RELTAG=\$(git describe --tags --long --always --dirty='-*' --match '[0-9]*.*' 2>/dev/null)
GITCOUNT=\$(git rev-list --count HEAD 2>/dev/null)
LASTTAG=$(git describe --tags $(git rev-list --tags --max-count=1))
git --no-pager log -1 --date=short --decorate=short \
--pretty=format:"# DON'T EDIT !!! autogenerated file. DON'T EDIT !!!
HBK_FIRMWARE_HASH = \"%h\"
HBK_FIRMWARE_TAG = \"\$LASTTAG\"
HBK_FIRMWARE_COUNT = \"\$GITCOUNT\"
HBK_FIRMWARE_VERSION = \"\$LASTTAG-\$GITCOUNT-\$RELTAG\"
" HEAD > firmware-version.conf
EOF
chmod a+x .git/hooks/post-commit
cp .git/hooks/post-commit .git/hooks/post-checkout
cp .git/hooks/post-commit .git/hooks/post-merge
git checkout
}

bootstrap()
{
    [ "$CWD" = "$BASEFOLDER" ] && echo -e "\nERROR: In folder '$BASEFOLDER', will not bootstrap here" && return 1

    mkdir -p "$BASEFOLDER" downloads
    cd "$BASEFOLDER"

    echo "Install openembedded-core"
    test -e downloads/openembedded-core-zeus.tgz || wget http://git.openembedded.org/openembedded-core/snapshot/openembedded-core-2019-10.1-zeus.tar.gz -O downloads/openembedded-core-zeus.tgz

    test -e external/openembedded-core-2019-10.1-zeus || tar -xf downloads/openembedded-core-zeus.tgz -C external
    test -e external/openembedded-core || ln -fs openembedded-core-2019-10.1-zeus external/openembedded-core

    echo "Install bitbake"
    test -e downloads/bitbake.tgz || wget https://github.com/openembedded/bitbake/archive/1.44.1.tar.gz -O downloads/bitbake.tgz
    test -e external/bitbake-1.44.1 || tar -xf downloads/bitbake.tgz -C external
    test -e external/bitbake || ln -fs bitbake-1.44.1 external/bitbake

    echo "Install meta-openembedded"
    test -e downloads/meta-openembedded-zeus.zip || wget https://github.com/openembedded/meta-openembedded/archive/zeus.zip -O downloads/meta-openembedded-zeus.zip
    test -e external/meta-openembedded-zeus || unzip -qq downloads/meta-openembedded-zeus.zip -d external
    test -e external/meta-openembedded || ln -fs meta-openembedded-zeus external/meta-openembedded
    #rm -fr zeus.zip



    #echo "Syncing manifest..."
    #$REPO sync --fetch-submodules --no-clone-bundle
    #[ $? != 0 ] && echo -e "\nERROR: Could not sync manifest" && return 1

    #echo "Tracking remote repositories..."
    #$REPO forall -v -c 'echo $REPO_PATH && git checkout --track $REPO_REMOTE/$REPO_RREV'
    #[ $? != 0 ] && echo -e "\nERROR: Could not track remotes" && return 1

    #ln -fs meta-hbk/scripts scripts

    return 0
}

# Print help/usage if requested
if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    usage
    exit 0
fi

# Get positional parameters, if any
if [ $# -gt 0 ]; then
    BASEFOLDER=$CWD/$1
    if [ $# -gt 1 ]; then
        MANIFESTBRANCH=$2
    fi
fi

# Proceed with bootstrap

bootstrap || exit 1
prepare_git_hooks || exit 1

echo -e "
    Bootstrapped Yocto/NExT into $BASEFOLDER

    Suggested next steps:

    To build card firmware for QEMU:
        MACHINE=qemu source setup-environment build-ngt-qemu
        bitbake hdimage
        bitbake hbg

    To build card firmware for the NGT board:
        MACHINE=ngt-board source setup-environment build-ngt
        bitbake flash
        bitbake hbg

    To build frame firmware for the Atlas-Board:
        MACHINE=atlas-board source setup-environment build-atlas
        bitbake sdimage
"

clean_up
